{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlhoLrNmjbSbFdgJ9lYOTY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/agelii92/exjobb/blob/main/HGAN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "F1JOvtqOMlXa"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import statistics as stats\n",
        "from matplotlib import pyplot as plt\n",
        "from scipy import stats\n",
        "import pandas as pd\n",
        "import cv2\n",
        "import os\n",
        "import keras\n",
        "from keras import Sequential\n",
        "from keras.layers import Convolution1D as Conv1D\n",
        "from keras.layers import Dropout, Flatten, BatchNormalization, MaxPooling1D, Dense, UpSampling1D\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn import preprocessing\n",
        "from random import randint\n",
        "\n",
        "\n",
        "\n",
        "#latex font:\n",
        "plt.rcParams['mathtext.fontset'] = 'cm'\n",
        "plt.rcParams['font.family'] = 'STIXGeneral'\n",
        "\n",
        "os.environ['KERAS_BACKEND']='tensorflow'"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_data():\n",
        "    sigma1=0.25\n",
        "    sigma2=0.35\n",
        "    material = np.random.choice([0,1])\n",
        "    E=np.random.choice(np.linspace(0.5,1.5,200))\n",
        "    T=np.random.choice(np.linspace(0,10,200))\n",
        "    \n",
        "    def blackbody_effect(x,T):\n",
        "        if x > (20-T):\n",
        "            return (1/T)*np.sqrt(T**2-(20-x)**2)\n",
        "        else:\n",
        "            return 0\n",
        "            \n",
        "    x=np.linspace(0,20,200)\n",
        "    sigma1=0.25\n",
        "    sigma2=0.35\n",
        "    \n",
        "    #sigma = 0.8\n",
        "    material = np.random.choice([0,1])\n",
        "    E=np.random.choice(np.linspace(0.5,1.5,200))\n",
        "    T=np.random.choice(np.linspace(0,10,10))\n",
        "    if material == 0:\n",
        "        mu1=5*E\n",
        "        mu2=8*E\n",
        "        c=np.zeros(len(x))\n",
        "    if material == 1:\n",
        "        mu1=2*E\n",
        "        mu2=12*E\n",
        "        mu3=5*E\n",
        "        c=stats.norm.pdf(x, mu3, sigma2)\n",
        "        c=[C+np.random.normal(0,0.01) for C in c]\n",
        "        \n",
        "    a=stats.norm.pdf(x, mu1, sigma1)\n",
        "    a=[A+np.random.normal(0,0.01) for A in a]\n",
        "    \n",
        "    b=stats.norm.pdf(x, mu2, sigma2)\n",
        "    b=[B+np.random.normal(0,0.01) for B in b]\n",
        "    \n",
        "    d = [blackbody_effect(i,T) for i in x]\n",
        "    dat = [[(a[i]+b[i]+c[i]+d[i]) for i in list(range(0,len(b)))],E,T,material]\n",
        "    \n",
        "    return [(a[i]+b[i]+c[i]+d[i]) for i in list(range(0,len(b)))]"
      ],
      "metadata": {
        "id": "5H7xferaNam8"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_real(n):\n",
        "  Xtrain=[]\n",
        "  #ytrain=[]\n",
        "  #Xtest=[]\n",
        "  #ytest=[]\n",
        "  for i in list(range(0,n)):\n",
        "      temp=get_data()\n",
        "      Xtrain.append(get_data())\n",
        "  #    ytrain.append([temp[1],temp[2],temp[3]])\n",
        "  #    temp=get_data()\n",
        "  #    Xtest.append(temp[0])\n",
        "  #    ytest.append([temp[1],temp[2],temp[3]])\n",
        "\n",
        "  #Xtest = preprocessing.normalize(np.array(Xtest),norm='l1')\n",
        "  Xtrain = preprocessing.normalize(np.array(Xtrain),norm='l1')\n",
        "  #ytest=np.array(ytest)\n",
        "  #ytrain=np.array(ytrain)\n",
        "  Xtrain = Xtrain.reshape((Xtrain.shape[0], Xtrain.shape[1], 1))\n",
        "  #Xtest = Xtest.reshape((Xtest.shape[0], Xtest.shape[1], 1))\n",
        "  #ytrain = ytrain.reshape((ytrain.shape[0], ytrain.shape[1], 1))\n",
        "  #ytest = ytest.reshape((ytest.shape[0], ytest.shape[1], 1))\n",
        "  idx = np.random.permutation(len(Xtrain))\n",
        "  return Xtrain[idx]\n",
        "\n"
      ],
      "metadata": {
        "id": "xjsUSOWdNapb"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot 25 images\n",
        "Xtest = get_samples(500)\n",
        "print(type(Xtest))\n",
        "for i in range(25):\n",
        "\tplt.subplot(5, 5, 1 + i)\n",
        "\tplt.axis('off')\n",
        "\tplt.plot(np.linspace(0,20,200),Xtest[i+randint(0,400)])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "Q4Unc7tCNar6",
        "outputId": "1b052392-5d63-4aa4-8c65-77896578d0f4"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 25 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def activate_discriminator(INPUT_SHAPE): #define input_shape as Xtrain.shape[1:]\n",
        "  model = Sequential()\n",
        "  model.add(keras.layers.Input(shape=INPUT_SHAPE))\n",
        "\n",
        "  model.add(Conv1D(filters=62,kernel_size=3, activation='LeakyReLU', padding='same'))     #1st convolution layer\n",
        "  model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))\n",
        "  model.add(BatchNormalization(axis=-1))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  model.add(Conv1D(filters=52,kernel_size=3, activation='LeakyReLU', padding='same'))\n",
        "  model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #2nd convolution layer\n",
        "  model.add(BatchNormalization(axis=-1))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  model.add(Conv1D(filters=32,kernel_size=3, activation='LeakyReLU', padding='same'))\n",
        "  model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #Could add stride here to see low frequency content\n",
        "  model.add(BatchNormalization(axis=-1))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  model.add(Flatten())                                                               #prepare for dense layer\n",
        "\n",
        "  model.add(Dense(activation='LeakyReLU',units=512))                                      #1st dense layer\n",
        "  model.add(BatchNormalization(axis=-1))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  model.add(Dense(activation='LeakyReLU',units=256))                                      #2nd dense layer\n",
        "  model.add(BatchNormalization(axis=-1))\n",
        "  model.add(Dropout(0.2))\n",
        "\n",
        "  model.add(Dense(activation='sigmoid',units=1)) #sigmoid since this is a question of binary classification, fake or real.\n",
        "  return model                                   #output shape? (1,)?\n",
        "\n",
        "test_disc = activate_discriminator((200,1))\n",
        "print(test_disc.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KZPfrOE_NauC",
        "outputId": "af56e03e-dc1b-490d-9158-64a6b6125447"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv1d_3 (Conv1D)           (None, 200, 62)           248       \n",
            "                                                                 \n",
            " max_pooling1d_3 (MaxPooling  (None, 67, 62)           0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " batch_normalization_5 (Batc  (None, 67, 62)           248       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout_5 (Dropout)         (None, 67, 62)            0         \n",
            "                                                                 \n",
            " conv1d_4 (Conv1D)           (None, 67, 52)            9724      \n",
            "                                                                 \n",
            " max_pooling1d_4 (MaxPooling  (None, 23, 52)           0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " batch_normalization_6 (Batc  (None, 23, 52)           208       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout_6 (Dropout)         (None, 23, 52)            0         \n",
            "                                                                 \n",
            " conv1d_5 (Conv1D)           (None, 23, 32)            5024      \n",
            "                                                                 \n",
            " max_pooling1d_5 (MaxPooling  (None, 8, 32)            0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " batch_normalization_7 (Batc  (None, 8, 32)            128       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout_7 (Dropout)         (None, 8, 32)             0         \n",
            "                                                                 \n",
            " flatten_1 (Flatten)         (None, 256)               0         \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 512)               131584    \n",
            "                                                                 \n",
            " batch_normalization_8 (Batc  (None, 512)              2048      \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout_8 (Dropout)         (None, 512)               0         \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 256)               131328    \n",
            "                                                                 \n",
            " batch_normalization_9 (Batc  (None, 256)              1024      \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout_9 (Dropout)         (None, 256)               0         \n",
            "                                                                 \n",
            " dense_5 (Dense)             (None, 1)                 257       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 281,821\n",
            "Trainable params: 279,993\n",
            "Non-trainable params: 1,828\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def activate_generator(latent_shape): #latent_shape is the dimensions of the latent vector (random input seed for generator). here (200,1)\n",
        "  model = Sequential()\n",
        "  model.add(keras.layers.Input(shape=latent_shape))\n",
        "\n",
        "  model.add(Dense(units=latent_shape[0]*latent_shape[1], activation = 'LeakyReLU'))\n",
        "\n",
        "  model.add(Conv1D(filters = 5, kernel_size = 3, activation = 'LeakyReLU', padding = 'same'))\n",
        "  #model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #2nd convolution layer\n",
        "  #model.add(BatchNormalization(axis=-1))\n",
        "\n",
        "  model.add(UpSampling1D(size=4))\n",
        "  model.add(Conv1D(filters = 15, kernel_size = 3, activation = 'LeakyReLU', padding = 'same'))\n",
        "  #model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #2nd convolution layer\n",
        "  #model.add(BatchNormalization(axis=-1))\n",
        "\n",
        "  model.add(Conv1D(filters=52,kernel_size=3, activation='LeakyReLU', padding='same'))\n",
        "  #model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #2nd convolution layer\n",
        "  #model.add(BatchNormalization(axis=-1))\n",
        "\n",
        "  model.add(Conv1D(filters=1,kernel_size=3, activation='LeakyReLU', padding='same'))\n",
        "  #model.add(MaxPooling1D(pool_size=3,padding='same',data_format='channels_last'))    #2nd convolution layer\n",
        "  #model.add(BatchNormalization(axis=-1))\n",
        "\n",
        "  return model\n",
        "\n",
        "\n",
        "test_gen = activate_generator((50,1))\n",
        "print(test_gen.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L7T-pfHtNawV",
        "outputId": "66206e9c-1876-46fc-a080-13f3abbbbb09"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_10\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_14 (Dense)            (None, 50, 50)            100       \n",
            "                                                                 \n",
            " conv1d_23 (Conv1D)          (None, 50, 5)             755       \n",
            "                                                                 \n",
            " up_sampling1d_4 (UpSampling  (None, 200, 5)           0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " conv1d_24 (Conv1D)          (None, 200, 15)           240       \n",
            "                                                                 \n",
            " conv1d_25 (Conv1D)          (None, 200, 52)           2392      \n",
            "                                                                 \n",
            " conv1d_26 (Conv1D)          (None, 200, 1)            157       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 3,644\n",
            "Trainable params: 3,644\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def activate_GAN(discriminator, generator):\n",
        "\n",
        "  discriminator.trainable = False\n",
        "  model = Sequential()\n",
        "  model.add(generator)\n",
        "  model.add(discriminator)\n",
        "  model.compile(loss='binary_crossentropy', optimizer='adam') #try other loss for optimizer\n",
        "  return model"
      ],
      "metadata": {
        "id": "lfUBk-RpNayt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_fake(generator, latent_len, n):\n",
        "  latent_input = np.reshape(np.random.randn(latent_len*n),(latent_len,n)) #(50,batchsize/2)\n",
        "  X = generator.predict(latent_input)\n",
        "  y = \n"
      ],
      "metadata": {
        "id": "UrMJz7xxeygz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train(generator, discriminator, GAN, n_epochs, n_batch):\n",
        "  n = int(n_batch/2)\n",
        "  latent_len = 50\n",
        "  for i in range(n_epochs):\n",
        "\n",
        "    Xreal = get_real(n)\n",
        "    yreal = np.reshape(np.ones(n),(n,1))\n",
        "\n",
        "    Xfake = get_fake(generator, latent_len, n)\n"
      ],
      "metadata": {
        "id": "zQAF1g68Na1Z"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a=np.ones(10)\n",
        "a=np.reshape(a,(10,1))\n",
        "print(a.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iIGNzER9Na3d",
        "outputId": "a6b1bca7-b7a4-43e9-a7f6-e2ecb2efd98a"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(10, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YgFb6sigNa5s",
        "outputId": "2581dce5-c7d2-41bb-e26d-ea1ee9a543e4"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "shL7nPOXNa8J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YvNnw_p4Na-n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4NecG8KiNbAy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZArJRS_cNbDL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TENbu2p3NbFk"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}